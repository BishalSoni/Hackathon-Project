

def customer_homePage(phno2):

    def customer_analysis():
        print(phno2.get())

        def get_selected_date(selection):
            selected_date = selection
            print (selected_date)

        rootan = Tk()
        rootan.geometry("940x610+100+50")
        rootan.title("Customer Analysis")
        rootan.config(bg="#4fc3f7")
        selected_date = StringVar(rootan)

        x = []
        y = []
        a = []
        b = []

        analysislabel = Label(rootan,text="Customer Analysis",font=("Lobster Two",20,"bold"),fg="#ffffff",
                              bg="#4fc3f7")
        analysislabel.pack()
        # navbar = Frame(rootan,bg="#212121",height=50,width=920)
        # navbar.place(x=0,y=0)
        g1 = con.cursor()
        g1.execute("select pcategory as purchased from inventory,sales where inventory.pid = sales.pid and cmobnum = ? GROUP by pcategory;",(phno2.get(),))
        fetch = g1.fetchall()

        for data in fetch:
            x.extend(data)

        g2 = con.cursor()
        g2.execute("select count(sales.pid) as purchased from inventory,sales where inventory.pid = sales.pid and cmobnum = ? GROUP by pcategory;",(phno2.get(),))
        fet = g2.fetchall()

        for dat in fet:
            y.extend(dat)

        fig = Figure(figsize=(5,3), dpi=80)
        fig.suptitle('Category - wise', fontsize = 16)
        axes = fig.add_subplot(111)
        axes.plot(x,y)

        canvas = FigureCanvasTkAgg(fig,rootan)
        canvas.get_tk_widget().place(x = 20 , y=350)
        fig.set_facecolor("#81d4fa")

        c = con.cursor()
        top = c.execute("select pname,pcategory,count(pname) from inventory,sales where inventory.pid = sales.pid and cmobnum = ? group by pname order by count(pname) DESC LIMIT 5;",(phno2.get(),))
        fetc = c.fetchall()

        top5 = Label(rootan,text="Most recently bought :",font=("Oxygen",16,"bold"),fg="#212121",
                              bg="#4fc3f7")
        top5.place(x=650,y=100)

        tree = Treeview(rootan,columns=('pname','pcategory','count(pname)'))
        tree.heading('pname', text='Product Name')
        tree.heading('pcategory', text='Category')
        tree.heading('count(pname)', text='Purchased count')
        tree.column("pname",width=90)
        tree.column("pcategory",width=90)
        tree.column("count(pname)",width=90)
        tree.place(x=650,y=150)
        tree['show'] = 'headings'

        for data in fetc:
            tree.insert('', 'end', values=(data))

        options = []

        d = con.cursor()
        d.execute("select distinct(date) from sales;")
        val = d.fetchall()

        for data in val:
            options.extend(data)

        selected_date.set(options[1])

        p = con.cursor()
        p.execute("""select sum(pprice) from inventory,sales where sales.pid = inventory.pid and cmobnum = ? group by strftime("%m",date) order by strftime("%m",date)""",(phno2.get(),))
        fetc = p.fetchall()

        i = con.cursor()
        i.execute("""select distinct  strftime("%m",date) as month from sales order by month;""")
        fet = i.fetchall()


        for dat in fetc:
            a.extend(dat)

        for data in fet:
            b.extend(data)


        fig2 = Figure(figsize=(5,3), dpi=80)
        fig2.suptitle('Monthly Spendings', fontsize = 16)
        axes2 = fig2.add_subplot(111)
        axes2.plot(b,a)

        canvas2 = FigureCanvasTkAgg(fig2,rootan)
        canvas2.get_tk_widget().place(x=20 , y=80)
        fig2.set_facecolor("#81d4fa")


        outbtn= Button(rootan,text="Back",font=("Noto sans",12,"bold"),fg="#ffffff",
                                bg="#c62828",relief = "flat",command=rootan.destroy)
        outbtn.place(x=830,y=5)

        rootan.mainloop()


    def add_sales(roots):
        roots.destroy()
        a=con.cursor()
        b=con.cursor()
        c=con.cursor()
        d=con.cursor()
        flag=0
        for data in tree2.get_children():
            val=(tree2.item(data)["values"][0])
            a.execute("SELECT pid FROM inventory WHERE pname = ?",(val,))
            fetch = a.fetchone()
            for x in fetch:
                d.execute("SELECT total_quantity FROM stock WHERE pid = ?",(x,))
                val = d.fetchone()
                for y in val:
                    print(y)
                    if(y >=1):
                        b.execute("INSERT INTO sales(cmobnum,pid,date) VALUES (?,?,?)",(phno2.get(),x,datetime.date(datetime.now()),))
                        c.execute("UPDATE stock SET total_quantity = total_quantity -1 WHERE pid = ?",(x,))
                        flag = flag+1
                    else:
                        messagebox.showerror("Error","Stock Empty!")

        if flag > 0:
            messagebox.showinfo("Success","Item Purchased")
        # charge()
        con.commit()

    def submit(tree2):
        roots = Tk()
        roots.geometry("920x570+100+50")
        roots.title("Billing")
        roots.config(bg="#ffe0b2")

        c=con.cursor()

        s=0
        for child in tree2.get_children():
            s=s+tree2.item(child)["values"][1]
        totalSum.set(s)

        navbar2 = Frame(roots,bg="#212121",height=50,width=920)
        navbar2.place(x=0,y=0)

        outbtn= Button(navbar2,text="Back",font=("Noto sans",12,"bold"),fg="#ffffff",
                            bg="#c62828",relief = "flat",command=roots.destroy)
        outbtn.place(x=830,y=5)


        tree3 = Treeview(roots,columns=('pname','pprice'))
        tree3.heading('pname', text='Product Name')
        tree3.heading('pprice', text='Price')
        tree3.column("pname",width=90)
        tree3.column("pprice",width=90)
        tree3.pack(side=LEFT,anchor=N,fill='x',expand=TRUE,pady=(90,0))
        tree3['show'] = 'headings'

        for data in tree2.get_children():
            tree3.insert('', '0', values=(tree2.item(data)["values"]))

        buyButton= Button(roots,text="Buy",font=("Noto sans",12,"bold"),fg="#ffffff",
                            bg="#c62828",relief = "flat",command=lambda : add_sales(roots) )
        buyButton.place(x=830,y=450)

        total_label =  Label(roots,text="Total : ",font=("Noto sans",12,"bold"),
                fg="#212121",bg="#ffe0b2")
        total_label.place(x=200,y=400)

        total_labelVal =  Label(roots,text=totalSum.get(),font=("Noto sans",12,"bold"),
                fg="#212121",bg="#ffe0b2")
        total_labelVal.place(x=260,y=400)

        roots.mainloop()


    rootc = Tk()
    rootc.geometry("920x570+100+50")
    rootc.title("Home")
    rootc.config(bg="#ffe0b2")

    searchVar = StringVar(rootc)
    totalSum = IntVar(rootc)
    treeVals = []
    loginName = StringVar()
    c=con.cursor()

    navbar = Frame(rootc,bg="#212121",height=50,width=920)
    navbar.place(x=0,y=0)

    u = con.cursor()
    u.execute("SELECT cname from customer where cmobnum = ?",(phno2.get(),))
    fe = u.fetchone()

    for x in fe:
        loginName.set(x)

    welcomeUser = Label(navbar,text="Hello : ",font=("Noto sans",12,"bold"),
            fg="#ffffff",bg="#212121")
    welcomeUser.place(x=10,y=8)

    welcomeUserVal = Label(navbar,text=loginName.get(),font=("Oxygen",12,"bold"),
            fg="#ffffff",bg="#212121")
    welcomeUserVal.place(x=70,y=8)

    analysisbtn = Button(navbar,text="Analysis",font=("Noto sans",12,"bold"),fg="#ffffff",
                            bg="#2979ff",relief = "flat",command= lambda: customer_analysis())
    analysisbtn.place(x=260,y=5)

    outbtn= Button(navbar,text="Back",font=("Noto sans",12,"bold"),fg="#ffffff",
                        bg="#c62828",relief = "flat",command=rootc.destroy)
    outbtn.place(x=830,y=5)

    def check():
        s=0
        for child in tree2.get_children():
            s=s+tree2.item(child)["values"][1]
        totalSum.set(s)
        total_label =  Label(rootc,text=totalSum.get(),font=("Noto sans",12,"bold"),
                fg="#212121",bg="#ffe0b2")
        total_label.place(x=245,y=544)

    def add_name():

        x = tree.focus()
        y = tree.item(x,"values")
        tree2.insert('', '0', values=(y))

    def remove_name():
        x = tree2.selection()
        tree2.delete(x)

    def command(self, *args):
        selections = []

        for i in range(len(treeVals)):
            if searchVar.get() != "" and searchVar.get() == treeVals[i][:len(searchVar.get())]:
                selections.append(ids[i])
                print(selections)#if it matches it appends the id to the selections list
        tree.selection_set(selections)


    c.execute("SELECT pname,pprice FROM `inventory` ORDER BY pid ASC")
    fetch = c.fetchall()

  #  row_format ="{:8}  {:>28}"

    selection_label = Label(rootc,text="Select Product To Add  ",font=("Noto sans",10,"bold"),
                fg="#212121",bg="#ffe0b2")
    selection_label.place(x=740,y=52)



    tree = Treeview(rootc,columns=('pname','pprice'))
    tree.heading('pname', text='Product Name')
    tree.heading('pprice', text='Price')
    tree.column("pname",width=90)
    tree.column("pprice",width=90)
    tree.pack(side=RIGHT,anchor=NE,fill='y',pady=(72,0))
    tree['show'] = 'headings'

    searchVar.trace("w",command)
    search =  Entry(rootc,width=34,relief="flat",bg="#ffffff",textvariable=searchVar,
                  font=("Oxygen",10))
    search.insert(0,'Quick Search')
    search.place(x=500,y=15)

    ids = []
    for data in fetch:
        ids.append(tree.insert('', 'end', values=(data)))


    for child in tree.get_children():
        treeVals.append(tree.item(child)['values'][0])

    print(ids)
    print(treeVals)

    cart_label = Label(rootc,text="Your Cart : Select to remove an item ",font=("Noto sans",10,"bold"),
                fg="#212121",bg="#ffe0b2")
    cart_label.place(x=2,y=52)

    tree2 = Treeview(rootc,columns=('pname','pprice'))
    tree2.heading('pname', text='Product Name')
    tree2.heading('pprice', text='Price')
    tree2.column("pname",width=90)
    tree2.column("pprice",width=90)
    tree2.pack(side=LEFT,anchor=W,fill='y',pady=(72,0))
    tree2['show'] = 'headings'


    add_button = Button(rootc, text='Add',font=("Oxygen",10,"bold"),fg="#ffffff",
                        bg="#0091ea",relief = "flat",command=add_name)
    add_button.place(x=380,y=235)

    remove_button = Button(rootc, text='Remove',font=("Oxygen",10,"bold"),fg="#ffffff",
                        bg="#0091ea",relief = "flat",command=remove_name)
    remove_button.place(x=428,y=235)

    check_button = Button(rootc, text='Check',font=("Oxygen",10,"bold"),fg="#ffffff",
                        bg="#0091ea",relief = "flat",command=check)
    check_button.place(x=500,y=235)

    submit_button = Button(rootc, text='Submit',font=("Oxygen",10,"bold"),fg="#ffffff",
                        bg="#1de9b6",relief = "flat",command= lambda : submit(tree2))
    submit_button.place(relx=0.5, rely=0.5, anchor=CENTER)


    total_label =  Label(rootc,text="Total : ",font=("Noto sans",12,"bold"),
                fg="#212121",bg="#ffe0b2")
    total_label.pack(side=BOTTOM,anchor=SW)


    con.commit()
    rootc.mainloop()

